/*
* Copyright (c) 2016, 华中科技大学 国家数控系统工程中心
* All rights reserved.
*
* 文件名称：ListADT.h
* 文件标识：线性表头文件
* 摘    要：
* 运行平台：windows
*
* 版    本：1.00
* 作    者：潘成龙
* 日    期：2016年12月29日
* 说    明：
*/
#pragma once

//The Linked List with a header/dummy node
#ifndef _LISTADT_H_
#define _LISTADT_H_
typedef  int ElementType;
struct Node;
typedef	struct Node *PtrToNode;
typedef PtrToNode List;
typedef PtrToNode Position;

/*operations on the list ADT */

/////////////////////////////////////////////////////////////////////////////
// 
//    extern List CreateList()
// 
//    功能：
//            生成链表(含表头)
// 
//    参数：
//			  无
// 
//    描述：
//			  生成带表头的空链表
//
//    返回：
//			  带表头的空链表
////////////////////////////////////////////////////////////////////////////
extern List CreateList(ElementType headerElement = 0);

/////////////////////////////////////////////////////////////////////////////
// 
//    extern List MakeListEmpty(List L)
// 
//    功能：
//            链表(含表头)置空
// 
//    参数：
//			  L：待处理链表L
// 
//    描述：
//			  释放链表占用空间，保留表头
//
//    返回：
//			  带表头的空链表
////////////////////////////////////////////////////////////////////////////
extern List MakeListEmpty(List L);

/////////////////////////////////////////////////////////////////////////////
// 
//    extern void PrintList(List L)
// 
//    功能：
//            顺序打印链表(含表头)元素
// 
//    参数：
//			  L：待处理链表L
// 
//    描述：
//			  从表头下一个元素开始打印，直到链表尾
//
//    返回：
//			  无
////////////////////////////////////////////////////////////////////////////
extern void PrintList(List L);

/////////////////////////////////////////////////////////////////////////////
// 
//    extern int IsListEmpty(List L)
// 
//    功能：
//            判断链表(含表头)是否为空链表
// 
//    参数：
//			  L：待处理链表L
// 
//    描述：
//			  无
//
//    返回：
//			  true/1: 空链表
//            false/0:非空链表
////////////////////////////////////////////////////////////////////////////
extern int IsListEmpty(List L);

/////////////////////////////////////////////////////////////////////////////
// 
//    extern int IsLast(Position P,List L)
// 
//    功能：
//            判断节点是否为链表(含表头)最后一个节点
// 
//    参数：
//			  P: 节点P
//			  L：待处理链表L
//    描述：
//			  判断P是否有Next,参数L未使用
//
//    返回：
//			  true/1: P是L最后的节点
//            false/0:P不是L最后的节点
////////////////////////////////////////////////////////////////////////////
extern int IsLast(Position P,List L);

/////////////////////////////////////////////////////////////////////////////
// 
//    extern Position Find(ElementType X,List L)
// 
//    功能：
//            链表(含表头)中查找特定元素
// 
//    参数：
//			  X: 待查找元素X	
//			  L：待处理链表L
//    描述：
//			  查找第一次出现X的节点
//
//    返回：
//			  第一次出现X的节点的位置，NULL则未找到
////////////////////////////////////////////////////////////////////////////
extern Position Find(ElementType X,List L);

/////////////////////////////////////////////////////////////////////////////
// 
//    extern void Delete(ElementType X,List L)
// 
//    功能：
//            链表(含表头)中删除特定元素
// 
//    参数：
//			  X: 待删除元素X	
//			  L：待处理链表L
//    描述：
//			  查找第一次出现X的节点，若没有则不处理
//
//    返回：
//			  无
////////////////////////////////////////////////////////////////////////////
extern void Delete(ElementType X,List L);
static Position FindPrevious(ElementType X, List L);

/////////////////////////////////////////////////////////////////////////////
// 
//    extern void Insert(ElementType X,List L,Position P)
// 
//    功能：
//            向链表(含表头)特定位置插入特定元素
// 
//    参数：
//			  X: 待插入元素X	
//			  L：待处理链表L
//			  P: 插入节点位置P
//    描述：
//			  （1）链表L中，在节点P之后插入元素X
//			  （2）假定节点P在链表L中，且合法
//			  （3）参数L未使用
//    返回：
//			  空
////////////////////////////////////////////////////////////////////////////
extern void Insert(ElementType X,List L,Position P);

/////////////////////////////////////////////////////////////////////////////
// 
//    extern void InsertBySize(ElementType X, List L)
// 
//    功能：
//            根据元素大小，向链表(含表头)插入元素（从小到大）
// 
//    参数：
//			  X: 待插入元素X	
//			  L：待处理链表L
//    描述：
//			  链表L中，在适当节点插入元素X，使链表元素递增
//    返回：
//			  空
////////////////////////////////////////////////////////////////////////////
extern void InsertBySize(ElementType X, List L);

/////////////////////////////////////////////////////////////////////////////
// 
//    extern void InsertInEnd(ElementType X, List L)
// 
//    功能：
//            在链表(含表头)尾部插入元素
// 
//    参数：
//			  X: 待插入元素X	
//			  L：待处理链表L
//    描述：
//			  链表L中，在链表尾部插入元素X
//    返回：
//			  空
////////////////////////////////////////////////////////////////////////////
extern void InsertInEnd(ElementType X, List L);


/////////////////////////////////////////////////////////////////////////////
// 
//    extern void DeleteList(List L)
// 
//    功能：
//            完全删除链表(含表头)
// 
//    参数：
//			  L：待处理链表L
// 
//    描述：
//			  删除链表（包括表头），释放空间，置L = NULL(函数调用返回后S不是NULL)
//			  
//    返回：
//			  无
////////////////////////////////////////////////////////////////////////////
extern void DeleteList(List L);

/////////////////////////////////////////////////////////////////////////////
// 
//    extern Position Header(List L)
// 
//    功能：
//            返回链表(含表头)表头位置
// 
//    参数：
//			  L：待处理链表L
// 
//    描述：
//			  无
//
//    返回：
//			  链表的表头位置
////////////////////////////////////////////////////////////////////////////
extern Position Header(List L);

/////////////////////////////////////////////////////////////////////////////
// 
//    extern Position First(List L)
// 
//    功能：
//            返回链表(含表头)第一个节点位置
// 
//    参数：
//			  L：待处理链表L
// 
//    描述：
//			  无
//
//    返回：
//			  链表的第一个节点位置
////////////////////////////////////////////////////////////////////////////
extern Position First(List L);

/////////////////////////////////////////////////////////////////////////////
// 
//    extern Position Advance(Position P)
// 
//    功能：
//            查找指定节点的下一节点
// 
//    参数：
//			  P: 指定节点P
// 
//    描述：
//			  无
//
//    返回：
//			  节点P的下一节点位置
////////////////////////////////////////////////////////////////////////////
extern Position Advance(Position P);

/////////////////////////////////////////////////////////////////////////////
// 
//    extern ElementType Retrieve(Position P)
// 
//    功能：
//            获取指定位置节点的节点元素
// 
//    参数：
//			  P: 指定节点P
// 
//    描述：
//			  无
//
//    返回：
//			  节点P的元素
////////////////////////////////////////////////////////////////////////////
extern ElementType Retrieve(Position P);

/////////////////////////////////////////////////////////////////////////////
// 
//    extern void RadixSort(ElementType *Data,int Num)
// 
//    功能：
//            基于链表的基数排序（以10为基数）
// 
//    参数：
//			  Data： 输入数据数组
//			  Num：  数据个数
//    描述：
//			  将输入数据排序后存入原来的数组返回
//
//    返回：
//			  无
////////////////////////////////////////////////////////////////////////////
extern void RadixSort(ElementType *Data,int Num);
static void SortMove(List orig[], List obj[],int divisor);



#endif




